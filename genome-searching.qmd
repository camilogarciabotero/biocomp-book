# Genome searching {.unnumbered}

In this chapter we will use several tools to download a genome from the command line. We will identify some features

### Downloading a genome {.unnumbered}

```bash
ncbi-genome-download
```

### Downloading from NCBI {.unnumbered}

The first step in this journey is to download a bunch of sequences programatically. To do so, we will use the program [ncbi-genome-download](https://github.com/kblin/ncbi-genome-download).

You could inspect all the options it provides, now we will set our command as the following:

```{zsh}
#| echo: true
#| eval: true
ngd --genera "Bacillus subtilis"\
    -s refseq\
    -l complete\
    -o Data\
    --flat-output\
    --format features\
    -n bacteria\
    | head -n 10
```

### Listing files {.unnumbered}

``` zsh
ls Data | head -n 10
```

### Decompressing using `gzip` {.unnumbered}

``` zsh
gzip -d *
```

. . .

#### Some files in our data dir {.unnumbered}

``` zsh
ls Data | head
```

### Importing the files into R {.unnumbered}

```{r}
#| label: file-reading
#| echo: true
#| eval: false
#| message: false
#| warclass-warning: false
#| warattr-warning: false
library(tidyverse)
library(fs)

all_features <- dir_ls("Data/") %>% 
  map_df(read_tsv)

all_features %>% 
  head()
```

. . .

```{r}
#| label: file-reading-exe
#| ref.label: file-reading
#| eval: true
#| cache: true
#| warattr-warning: false
#| out.width : 50%
```

### Data processing {.unnumbered}

```{r}
#| label: data-processing
#| echo: true
#| eval: false
#| message: false
all_features_grouped <- all_features %>% 
  rename(feature = `# feature`) %>% 
  select(assembly, feature) %>% 
  group_by(assembly, feature) %>%  operations
  count() %>% 
  pivot_wider(names_from = feature, values_from = n) %>% 
  arrange(desc(CDS))
    
all_features_grouped %>% 
  head()
```

create a new dataset that will group by features per accession.
get read of the weird name of the column.
Select these two columns.
Group by these two columns to perform.
count the numbers of rows based on the applied group.
generate a wide dataset sending row names as columns.
Arrange descending by the number of CDSs.