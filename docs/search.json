[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fundamentals of computational biology",
    "section": "",
    "text": "We started this book with the aim of compiling the lectures of the course Fundamentals of Computational Biology offered at Universidad EAFIT for undergrad students in Biology. The course has been taught from different perspectives from its creation, yet the last iteration was divided into three modules. i) introduction to Unix (4 lectures) ii) introduction to sequence analysis and genomics (7 lectures) and iii) principles of structural biology (4 lectures).\nLectures are focused on a theoretical-practical approach were basic concepts from biology, bioinformatics and computer science and interleave with the practice to solve challenges."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Here we present a course centered book of the Fundamentals of Computational Biology. We will cover several topics, from using the unix tools, the importance of package manager systems (such as homebrew and conda), sequencing technologies, sequence alignments, molecular phylogenetics, genome assembly and annotation, and variant calling analysis."
  },
  {
    "objectID": "01-welcome-to-command-line.html",
    "href": "01-welcome-to-command-line.html",
    "title": "1  Welcome to the command line",
    "section": "",
    "text": "In this chapter we will explore the fundamentals of the command line. That is the concepts of Unix based systems the command line (CLI) and how we can use it to access information programmatically."
  },
  {
    "objectID": "02-introduction-to-sequence-analysis.html",
    "href": "02-introduction-to-sequence-analysis.html",
    "title": "2  Introduction to sequence analysis",
    "section": "",
    "text": "In this chapter we will discuss several about several points of view about bioinformatics and computational biology and how to get started with the command line being a biologist, we will further consider several biological concepts that appear central to understand the manipulation of biological data."
  },
  {
    "objectID": "02-introduction-to-sequence-analysis.html#endless-debate-bioinformatics-vs.-computational-biology",
    "href": "02-introduction-to-sequence-analysis.html#endless-debate-bioinformatics-vs.-computational-biology",
    "title": "2  Introduction to sequence analysis",
    "section": "Endless debate: bioinformatics vs. computational biology",
    "text": "Endless debate: bioinformatics vs. computational biology"
  },
  {
    "objectID": "02-introduction-to-sequence-analysis.html#getting-started-with-the-command-line",
    "href": "02-introduction-to-sequence-analysis.html#getting-started-with-the-command-line",
    "title": "2  Introduction to sequence analysis",
    "section": "Getting started with the command line",
    "text": "Getting started with the command line"
  },
  {
    "objectID": "02-introduction-to-sequence-analysis.html#the-duality-of-dna",
    "href": "02-introduction-to-sequence-analysis.html#the-duality-of-dna",
    "title": "2  Introduction to sequence analysis",
    "section": "The duality of DNA",
    "text": "The duality of DNA"
  },
  {
    "objectID": "02-introduction-to-sequence-analysis.html#the-central-dogma-theory-of-molecular-biology-extended",
    "href": "02-introduction-to-sequence-analysis.html#the-central-dogma-theory-of-molecular-biology-extended",
    "title": "2  Introduction to sequence analysis",
    "section": "The central dogma theory of molecular biology extended",
    "text": "The central dogma theory of molecular biology extended"
  },
  {
    "objectID": "02-introduction-to-sequence-analysis.html#sequencing-strategies",
    "href": "02-introduction-to-sequence-analysis.html#sequencing-strategies",
    "title": "2  Introduction to sequence analysis",
    "section": "Sequencing strategies",
    "text": "Sequencing strategies"
  },
  {
    "objectID": "02-introduction-to-sequence-analysis.html#sequencing-over-time",
    "href": "02-introduction-to-sequence-analysis.html#sequencing-over-time",
    "title": "2  Introduction to sequence analysis",
    "section": "Sequencing over time",
    "text": "Sequencing over time"
  },
  {
    "objectID": "02-introduction-to-sequence-analysis.html#some-insights-from-sequencing-genomes",
    "href": "02-introduction-to-sequence-analysis.html#some-insights-from-sequencing-genomes",
    "title": "2  Introduction to sequence analysis",
    "section": "Some insights from sequencing genomes",
    "text": "Some insights from sequencing genomes"
  },
  {
    "objectID": "03-sanger-analysis.html",
    "href": "03-sanger-analysis.html",
    "title": "3  Sanger analysis",
    "section": "",
    "text": "This is a section about the first gen sequencing tech"
  },
  {
    "objectID": "03-sanger-analysis.html#databases-exploration",
    "href": "03-sanger-analysis.html#databases-exploration",
    "title": "3  Sanger analysis",
    "section": "Databases exploration",
    "text": "Databases exploration"
  },
  {
    "objectID": "03-sanger-analysis.html#sanger-sequencing-methods",
    "href": "03-sanger-analysis.html#sanger-sequencing-methods",
    "title": "3  Sanger analysis",
    "section": "Sanger sequencing methods",
    "text": "Sanger sequencing methods\n\nThe chain termination method\n\n\nSanger with capillary electrophoresis\n\n\nStrengths and limitations of Sanger methods"
  },
  {
    "objectID": "03-sanger-analysis.html#files-from-sanger",
    "href": "03-sanger-analysis.html#files-from-sanger",
    "title": "3  Sanger analysis",
    "section": "Files from Sanger",
    "text": "Files from Sanger"
  },
  {
    "objectID": "03-sanger-analysis.html#sanger-processing-workflow",
    "href": "03-sanger-analysis.html#sanger-processing-workflow",
    "title": "3  Sanger analysis",
    "section": "Sanger processing workflow",
    "text": "Sanger processing workflow"
  },
  {
    "objectID": "03-sanger-analysis.html#the-16s-rrna-and-its-relevance-for-sequencing",
    "href": "03-sanger-analysis.html#the-16s-rrna-and-its-relevance-for-sequencing",
    "title": "3  Sanger analysis",
    "section": "The 16S rRNA and its relevance for sequencing",
    "text": "The 16S rRNA and its relevance for sequencing"
  },
  {
    "objectID": "demo-genome-searching.html",
    "href": "demo-genome-searching.html",
    "title": "\n4  Genome searching\n",
    "section": "",
    "text": "Downloading a genome\nncbi-genome-download\nDownloading from NCBI\nThe first step in this journey is to download a bunch of sequences programatically. To do so, we will use the program ncbi-genome-download.\nYou could inspect all the options it provides, now we will set our command as the following:\n\nngd --genera \"Bacillus subtilis\"\\\n    -s refseq\\\n    -l complete\\\n    -o Data\\\n    --flat-output\\\n    --format features\\\n    -n bacteria\\\n    | head -n 10\n\nConsidering the following 193 assemblies for download:\nGCF_000772125.1 Bacillus subtilis   ATCC 13952\nGCF_000772165.1 Bacillus subtilis   ATCC 19217\nGCF_000772205.1 Bacillus subtilis   Bs-916\nGCF_000782835.1 Bacillus subtilis   SG6\nGCF_000789295.1 Bacillus subtilis   PS832\nGCF_000952895.1 Bacillus subtilis   BS34A\nGCF_000953615.1 Bacillus subtilis   BS49\nGCF_001015095.1 Bacillus subtilis   UD1022\nGCF_001037985.1 Bacillus subtilis   TO-A JPC\n\n\nListing files\nls Data | head -n 10\nDecompressing using gzip\n\ngzip -d *\n\nSome files in our data dir\nls Data | head\n\n\nImporting the files into R\n\nlibrary(tidyverse)\nlibrary(fs)\n\nall_features <- dir_ls(\"Data/\") %>% \n  map_df(read_tsv)\n\nall_features %>% \n  head()\n\n\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.3.5     ✔ purrr   0.3.4\n✔ tibble  3.1.6     ✔ dplyr   1.0.8\n✔ tidyr   1.2.0     ✔ stringr 1.4.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(fs)\n\nall_features <- dir_ls(\"Data/\") %>% \n  map_df(read_tsv)\n\nall_features %>% \n  head()\n\n# A tibble: 0 × 0\n\n\n\nData processing\n\nall_features_grouped <- all_features %>% \n  rename(feature = `# feature`) %>% \n  select(assembly, feature) %>% \n  group_by(assembly, feature) %>%  operations\n  count() %>% \n  pivot_wider(names_from = feature, values_from = n) %>% \n  arrange(desc(CDS))\n    \nall_features_grouped %>% \n  head()\n\ncreate a new dataset that will group by features per accession. get read of the weird name of the column. Select these two columns. Group by these two columns to perform. count the numbers of rows based on the applied group. generate a wide dataset sending row names as columns. Arrange descending by the number of CDSs."
  },
  {
    "objectID": "demo-sanger-processing.html",
    "href": "demo-sanger-processing.html",
    "title": "\n5  Sanger processing\n",
    "section": "",
    "text": "library(sangeranalyseR)\n\ngroEL <- SangerAlignment(\n  ABIF_Directory = \"~/Projects/Bacillus/Data/Sanger/Inter/groEL/\",\n  REGEX_SuffixForward = \"_1_F.ab1\",\n  REGEX_SuffixReverse = \"_2_R.ab1\",\n  TrimmingMethod = \"M2\",\n  M2CutoffQualityScore = 33,\n  M2SlidingWindowSize = 10\n)\n\nwriteFasta(groEL, \n           outputDir = \"~/Documents/Teaching/BiologyCourses/BI0487/Demos/02-demo-sangeranalysis\",\n           selection = \"contigs_unalignment\",\n           )\n\nlaunchApp(groEL)\ngenerateReport(groEL)\nqualityBasePlot(groEL)"
  },
  {
    "objectID": "demo-sanger-processing.html#processing-a-bulk-of-.ab1-files",
    "href": "demo-sanger-processing.html#processing-a-bulk-of-.ab1-files",
    "title": "\n5  Sanger processing\n",
    "section": "Processing a bulk of .ab1 files",
    "text": "Processing a bulk of .ab1 files\n\nlibrary(fs)\nlibrary(purrr)\n\ndirs <- fs::dir_ls(\"~/Projects/Bacillus/Data/Sanger/Inter\")\n\nsanger_bulk <- function(dir) {\n  SangerAlignment(\n    ABIF_Directory = dir,\n    REGEX_SuffixForward = \"_1_F.ab1\",\n    REGEX_SuffixReverse = \"_2_R.ab1\"\n  )\n}\n\ngenes <- dirs %>% \n  map(sanger_bulk)\n\nlaunchApp(genes$`/Users/camilogarcia/Projects/Bacillus/Data/Sanger/Inter/gyrA`)\n\nwriteFasta(\n  outputDir = \"~/Documents/Teaching/BiologyCourses/BI0487/Demos/02-demo-sangeranalysis\",\n  selection = \"contigs_unalignment\"\n)"
  },
  {
    "objectID": "demo-sequence-alignment.html",
    "href": "demo-sequence-alignment.html",
    "title": "6  Sequence alignment demo",
    "section": "",
    "text": "Make sure to use the --flat-output avoiding download of multiple metadata\nngd --flat-output -p 4 -s genbank -A genome-accessions.txt -F cds-fasta bacteria\nIn this case cds-fasta parameter will download the nucleotide sequences of the gene. Other alternatives could be useful such as blast search on a genome database or searching through the GENBANK annotation files (both files also could be downloaded using ngd)."
  },
  {
    "objectID": "demo-sequence-alignment.html#unwrapping-fasta-records",
    "href": "demo-sequence-alignment.html#unwrapping-fasta-records",
    "title": "6  Sequence alignment demo",
    "section": "Unwrapping FASTA records",
    "text": "Unwrapping FASTA records\nNCBI registries came with an undesirable wrapping around the lines of sequencing which basically is inserting a return character after some established number of characters. Then a way to get rid of them is to use a command line utility from AstrobioMike (Mike Lee) which will give a line per sequence after the FASTA header. We can later assume the the first line after the header will be the entire sequence\nfor i in GCA_*; do \n    N=$(basename $i .fna); \n    bash bit-remove-wraps.sh ${i} > ${N}_unwrapped.fasta; \ndone"
  },
  {
    "objectID": "demo-sequence-alignment.html#gene-search",
    "href": "demo-sequence-alignment.html#gene-search",
    "title": "6  Sequence alignment demo",
    "section": "Gene search",
    "text": "Gene search\nA possible way to search throughout the file registries is by using the grep command, that recursively will search each file. Fine tuned it allow to search for the first match, but also for the “after-context” in terms of lines desired to be printed:\ngrep -h\\\n     -m 1\\\n     -A 1\\\n     -E \"DNA gyrase, A| gyrase subunit A | gyrase alpha| gyrase \\(subunit A\\)| gyrA\"  *.fasta |\\\n     sed \"s/--//g\" |\\\n     sed \"/^$/d\"\nAfter finding the genes we could exclude some lines using sed avoid the “–” characters and the empty blank line using the appropriate regular expression (^$/d) . We are now with an almost clean multi sequence file, because header names are still and will be problematic. How do we programatically change the FASTA headers? We will see in the next step."
  },
  {
    "objectID": "demo-sequence-alignment.html#renaming-fasta-headers",
    "href": "demo-sequence-alignment.html#renaming-fasta-headers",
    "title": "6  Sequence alignment demo",
    "section": "Renaming fasta headers",
    "text": "Renaming fasta headers\nA simple but powerful script to do this is bit-dedup-fasta-heades it was developed by AstrobioMike (Mike Lee) and it simply parses the headers and substitutes by a simple encoder found en each of them:\npython bit-dedupe-fasta-headers.py -i all_gyrA.fasta -o all_gyrA_renamed.fasta\nNow the the files has files names that are simply to work with. Which will enable to asses better out sequence alignment matrix."
  },
  {
    "objectID": "demo-sequence-alignment.html#sequence-alignment",
    "href": "demo-sequence-alignment.html#sequence-alignment",
    "title": "6  Sequence alignment demo",
    "section": "Sequence alignment",
    "text": "Sequence alignment\nThere are many programs that are suited for performed multiple sequence alignments. Perhaps the two most used are MAFFT and MUSCLE both specialized in multiple sequence alignment (that is: when having two or more than two sequences). The second tends to be more accurate when having large data-sets, but the first on is more versatile, fast and accurate on different kind of data-sets.\n    Both programas take as input a single file containing all the sequences concatenated horizontally (that is a multi-fasta file) careless of the extension but (MFA, FA, FASTA, FNA, etc). And generate a simple output (whether with the -o in MUSCLE or to the std output in MAFFT)     \n\nginsi --preservecase --reorder all_gyrA_renamed.fasta > all_gyrA_renamed_ginsi.fasta # globally optimized\neinsi --preservecase --reorder all_gyrA_renamed.fasta > all_gyrA_renamed_einsi.fasta # gene-focused optimized\nlinsi --preservecase --reorder all_gyrA_renamed.fasta > all_gyrA_renamed_linsi.fasta # locally optimized\n\nmuscle -i all_gyrA_renamed.fasta -o all_gyrA_renamed_muscle.fasta\n\nfamsa -t 8 all_gyrA_renamed.fasta > all_gyrA_renamed_famsa.fasta\n\nkalign -i all_gyrA_renamed.fasta -o all_gyrA_renamed_kalign.fasta"
  },
  {
    "objectID": "demo-sequence-alignment.html#assesment-of-the-alignment",
    "href": "demo-sequence-alignment.html#assesment-of-the-alignment",
    "title": "6  Sequence alignment demo",
    "section": "Assesment of the alignment",
    "text": "Assesment of the alignment\nInspection of the alignment is there very first step for assesing its quality. A CDS tends to genereate a codon-like alignment starting with the methione codon (ATG,GTG) and finishing with a stop (TAA, TAG, etc.). Therefore finding this structure when aligning a complete genes is expected. If a middle fraction of the gene is being aligned ORF might not display any stop codon. Verifying a codon-like alignment shows a biological order on the sequences other that mere artifact of the alignment, that is an evolutionary behavior of the sequence. We can do it usin seqfu from the CLI or interactively with AliView.\nA second step is to find the variability of the alignment. A simple way to find that is to calculate simpl stats from the alignment (sites, variable sites, As, Ts, etc.). A powerful cli program to do so is goalign\ngoalign stats -i all_gyrA_renamed_linsi.fasta\nlength  2508\nnseqs   8\navgalleles  1.7400\nvariable sites  1202\nchar    nb  freq\n-   273 0.013606\nA   6418    0.319876\nC   3633    0.181071\nG   4755    0.236992\nT   4985    0.248455\nalphabet    nucleotide"
  },
  {
    "objectID": "demo-sequence-alignment.html#an-alternative-approach-using-blast",
    "href": "demo-sequence-alignment.html#an-alternative-approach-using-blast",
    "title": "6  Sequence alignment demo",
    "section": "An alternative approach using BLAST",
    "text": "An alternative approach using BLAST\nngd --flat-output -p 4 -s genbank -A genome-accessions.txt -F fasta --parallel 8 bacteria\n\nfor i in GCA_*; do cat ${i} >> all_genomes.fasta; done\n\nmakeblastdb -in all_genomes.fasta -parse_seqids -blastdb_version 5 -title \"demo\" -dbtype nucl\n\nblastn -db all_genomes.fasta -query gyrA.fasta -outfmt \"6 sseqid sseq\" -word_size 5 -evalue 1e-50 -num_threads 8 | sed -E \"s/gb|emb/>/g\" | sed -E \"s/\\t/\\n/\" > all_gyrA.fasta"
  },
  {
    "objectID": "demo-sequence-alignment.html#the-alternative-using-the-gcf",
    "href": "demo-sequence-alignment.html#the-alternative-using-the-gcf",
    "title": "6  Sequence alignment demo",
    "section": "The alternative using the GCF",
    "text": "The alternative using the GCF\nfor i in *fna; do; goalign subset -e \"gyrA\" -i ${i} --unaligned;done | grep \">\""
  }
]