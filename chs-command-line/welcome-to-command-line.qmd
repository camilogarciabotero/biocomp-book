# The command line {#sec-cli}

> In this chapter we will explore the fundamentals of the command line interface (aka CLI). And the differences between Operating Systems (OS), Unix, CLI, Bash and Terminal.
>
> As you will see the CLI is composed of several programs enabling the interaction with the machine, we will discuss some of the basics to navigate your machine, and some advance one that enable complex operations and automating tasks.

## Getting started with the command line

Before landing into the CLI let us consider the Unix concept. The first question that comes in this section is: what is Unix? It simply is an operating system (OS). On another terms it is a set of programs that inter-operate with each other to let you communicate with the machine. A very important variant of Unix with a *libre* access is the very known OS Linux. The most important idea behind Unix based systems is the idea that we can use it to access information and hardware programmatically.

Almost every computer has a way to interact with or access to the inner elements of the computer. Such interface is called the terminal [Fig. @fig-terminal]

![A **terminal** app displaying common features of the command line interface](imgs-cli/terminal.png){#fig-terminal fig-align="center"}

## Anatomy of a command

![A simple command and a convention to call its main components](imgs-cli/command-anatomy.png){#fig-command}

## Basic Unix commands

Programs, files and directories on every machine display hierarchical paths (routes), starting out from the **root** (`/`). The **root** represents the beginning of all the software installed in the machine. And many other files are nested from there forming a tree-like structure for the paths [Fig. @fig-tree]

![A figure displaying tree-like structure of the programs in a machine with macOS](imgs-cli/dir-tree.png){#fig-tree fig-align="center"}

::: {.callout-tip .column-margin}
You can inspect the paths of a nested directory tree using `tree` command in you cli:

``` bash
tree -d -L 1
```
:::

### Printing your working directory

To know where you are you can see your current location, that is to *print your working directory* using the `pwd` command.

``` bash
pwd .
```

### Making new directories

``` bash
mkdir test-dir
```

### Change to other directory

``` bash
cd test-dir
```

::: {.callout-tip .column-margin}
Some basic arguments to navigate across your terminal:

``` bash
cd .. # change backwards
cd ~  # change to the home
cd /  # change to the root
cd -  # change to previous dir
```
:::

### Creating a file

A simple command to create any file inside your terminal is `touch` it just create a file, but do not allow any editing.

``` bash
touch new-file.txt
```

The `new-file.txt` is empty and created on your current location unless you assign another path when creating it. We suggest to take a look at [Allison Horst](https://github.com/allisonhorst/stats-illustrations), especially on how to name files depending on the *case* see [Fig. @fig-naming-files]

::: column-margin
[![Different conventions for naming files or directories as a good computational practice. Such as de the kebab-case or the UpperCammelCase. Illustration by Allison Horst](imgs-cli/naming-files.png){#fig-naming-files}](https://raw.githubusercontent.com/allisonhorst/stats-illustrations/master/other-stats-artwork/coding_cases.png)
:::

### Listing files

``` bash
ls 
```

### Printing files to the screen

``` bash
cat new-file.txt
```

For more explanations on the basic commands in the command line we suggest to visit the first chapters of *Computing skills for biologist* from @allesina2019

## Advance Unix commands

``` bash
sed
```

``` bash
grep ">" 
```

::: callout-tip
You can navigate your executed commands by typing the ::up-arrow:: key
:::

## A glimpse to the Window subsystem for linux
