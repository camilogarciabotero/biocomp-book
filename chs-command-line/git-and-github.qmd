---
execute: 
  engine: knitr
---

# Version control {#sec-vcs}

> Here we will first address what is version control, its importance and basics on the local workflow.
>
> Later we will introduce GitHub and explore more advanced commands for the collaboration workflow


## Version control systems 

As its name suggests, a version control system (VCS) allow you to keep record of the changes happening while working files and directories. Several VCSs have been created but the most popular is [git](https://git-scm.com). It is characterized by being a **distributed** VCS, which means that changes history are recorded locally (whether in a user laptop or user account) in contrast to other **centralized** VCSs that changes are saved on a shared machine or server.

So, why bother to learn a VCS in bioinformatics? Well there are many reasons, but to highlight some of them: i) Since VCSs allow you to record changes, you can always trace back the steps made in ana analysis, which is nice for the **reproducibility** of your work. ii) a system like git could be coupled with a shared-centralized server as it is [GitHub](https://github.com) (we'll talk about it [later](../chs-command-line/git-and-github.qmd#exploring-github) and then one could **share and collaborate**, expanding the extent of your research and iii) following the structures and command from git its at first overwhelming and demands consistency and order, then when scaling a project it will payoff this stepping curve of learning by keeping the **efficiency** of your work.

## Git installation and configuration

Installation could proceed from the official page of [git](https://git-scm.com). If working from WSL it has the binaries preinstalled, so you can jump directly to the configuration. The second step is to configure your user name and an email. with the following lines:

```{bash}
#| eval: false
git config --global user.name "Your Name"
git config --global user.email user@eafit.edu.co
```

You could always user the preferred e-mail. More configurations are available, for instance the preferred editor to work with and so on, you can explore by asking for help `git config --help` or `git config --list`.

### The basics

There are at least **six** basic commands. Three of them allow recording local changes (`git init`, `git add` and `git commit`) and the other three help you to inspect the state of the changes (`git status`, `git diff` and `git log`), we will dive into the detail in the following lines. So, to start recording changes in a directory you must **initialize** the directory (which will now be called repository) using `git init`. This is a one-time command to get started.

### The local workflow

![Local workflow of a git project adding and committing changes](imgs-cli/gitlocal.png){#local-workflow}

### Ignoring files

the `.gitignore` file.

## Exploring GitHub

[GitHub home](https://github.com/home)

## From local to remote

### Cloning workflow

![](imgs-cli/gitcloning.png){#cloning-workflow}

### Forking and collaborate

![](imgs-cli/gitforking.png){#forking-workflow}

### Branching and merging