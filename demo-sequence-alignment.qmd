# Sequence alignment demo

::: {.callout-warning}
Your professor is working with species from genus  Bacillus and want to align an orthologous gene from 10 genomes of different isolates. He gives you the GenBank accession number of these isolates and ask you to select one orthologus gene (Nucleotide seq) that you consider might be useful to differentiate the bacterial isolates and ask you to align those genes as you better consider. He finally ask you to document each step and send him the sequence alignment file in FASTA format along with the sequence alignment general stats in a TXT file (length, number of each nucletides and other stats you consider important).

Accessions: GCA_012225885.1, GCA_000196735.1, GCA_000742895.1, GCA_001584335.1, GCA_000007825.1, GCA_000832905.1, GCA_000008425.1, GCA_000507105.1, GCA_000832605.1, GCA_900186955.1
:::

## Download sequences {.unnumbered}

Make sure to use the `--flat-output`  avoiding download of multiple metadata

```bash
ngd --flat-output -p 4 -s genbank -A genome-accessions.txt -F cds-fasta bacteria
```

In this case `cds-fasta` parameter will download the nucleotide sequences of the gene. Other alternatives could be useful such as blast search on a genome database or searching through the GENBANK annotation files (both files also could be downloaded using `ngd`).

## Unwrapping FASTA records {.unnumbered}

NCBI registries came with an undesirable wrapping around the lines of sequencing which basically is inserting a return character after some established number of characters. Then a way to get rid of them is to use a command line utility from [AstrobioMike (Mike Lee)](https://github.com/AstrobioMike) which will give a line per sequence after the FASTA header. We can later assume the the first line after the header will be the entire sequence

```bash
for i in GCA_*; do 
    N=$(basename $i .fna); 
    bash bit-remove-wraps.sh ${i} > ${N}_unwrapped.fasta; 
done
```

## Gene search {.unnumbered}

A possible way to search throughout the file registries is by using the `grep` command, that recursively will search each file. Fine tuned it allow to search for the first  match, but also for the "after-context" in terms of lines desired to be printed:

```bash
grep -h\
     -m 1\
     -A 1\
     -E "DNA gyrase, A| gyrase subunit A | gyrase alpha| gyrase \(subunit A\)| gyrA"  *.fasta |\
     sed "s/--//g" |\
     sed "/^$/d"
```

After finding the genes we could exclude some lines using `sed` avoid the "--" characters and the empty blank line using the appropriate regular expression (^$/d) . We are now with an almost clean multi sequence file, because header names are still and will be problematic. How do we programatically change the FASTA headers? We will see in the next step.

## Renaming fasta headers {.unnumbered}

A simple but powerful script to do this is `bit-dedup-fasta-heades` it was developed by [AstrobioMike (Mike Lee)](https://github.com/AstrobioMike) and it simply parses the headers and substitutes by a simple encoder found en each of them:

```bash
python bit-dedupe-fasta-headers.py -i all_gyrA.fasta -o all_gyrA_renamed.fasta
```

Now the the files has files names that are simply to work with. Which will enable to asses better out sequence alignment matrix.

## Sequence alignment {.unnumbered}

There are many programs that are suited for performed multiple sequence alignments. Perhaps the two most used are [`MAFFT`](https://mafft.cbrc.jp/alignment/software/) and [`MUSCLE`](https://drive5.com/muscle5/) both specialized in multiple sequence alignment (that is: when having two or more than two sequences). The second tends to be more accurate when having large data-sets, but the first on is more versatile, fast and accurate on different kind of data-sets. 

    Both programas take as input a single file containing all the sequences concatenated horizontally (that is a multi-fasta file) careless of the extension but (MFA, FA, FASTA, FNA, etc). And generate a simple output (whether with the `-o` in `MUSCLE` or to the std output in `MAFFT`)
    
```bash

ginsi --preservecase --reorder all_gyrA_renamed.fasta > all_gyrA_renamed_ginsi.fasta # globally optimized
einsi --preservecase --reorder all_gyrA_renamed.fasta > all_gyrA_renamed_einsi.fasta # gene-focused optimized
linsi --preservecase --reorder all_gyrA_renamed.fasta > all_gyrA_renamed_linsi.fasta # locally optimized

muscle -i all_gyrA_renamed.fasta -o all_gyrA_renamed_muscle.fasta

famsa -t 8 all_gyrA_renamed.fasta > all_gyrA_renamed_famsa.fasta

kalign -i all_gyrA_renamed.fasta -o all_gyrA_renamed_kalign.fasta
```

## Assesment of the alignment {.unnumbered}

Inspection of the alignment is there very first step for assesing its quality. A CDS tends to genereate a codon-like alignment starting with the methione codon (ATG,GTG) and finishing with a stop (TAA, TAG, etc.). Therefore finding this structure when aligning a complete genes is expected. If a middle fraction of the gene is being aligned ORF might not display any stop codon. Verifying a codon-like alignment shows a biological order on the sequences other that mere artifact of the alignment, that is an evolutionary behavior of the sequence. We can do it usin [seqfu](https://telatin.github.io/seqfu2/) from the CLI or interactively with [AliView](https://github.com/AliView/AliView).

A second step is to find the variability of the alignment. A simple way to find that is to calculate simpl stats from the alignment (sites, variable sites, As, Ts, etc.). A powerful cli program to do so is [goalign](https://github.com/evolbioinfo/goalign) 

```bash
goalign stats -i all_gyrA_renamed_linsi.fasta
```
```bash
length	2508
nseqs	8
avgalleles	1.7400
variable sites	1202
char	nb	freq
-	273	0.013606
A	6418	0.319876
C	3633	0.181071
G	4755	0.236992
T	4985	0.248455
alphabet	nucleotide
```

---

## An alternative approach using BLAST {.unnumbered}

```bash
ngd --flat-output -p 4 -s genbank -A genome-accessions.txt -F fasta --parallel 8 bacteria

for i in GCA_*; do cat ${i} >> all_genomes.fasta; done

makeblastdb -in all_genomes.fasta -parse_seqids -blastdb_version 5 -title "demo" -dbtype nucl

blastn -db all_genomes.fasta -query gyrA.fasta -outfmt "6 sseqid sseq" -word_size 5 -evalue 1e-50 -num_threads 8 | sed -E "s/gb|emb/>/g" | sed -E "s/\t/\n/" > all_gyrA.fasta
```

## The alternative using the GCF {.unnumbered}


```bash
for i in *fna; do; goalign subset -e "gyrA" -i ${i} --unaligned;done | grep ">"
```